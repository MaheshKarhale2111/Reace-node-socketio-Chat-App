why use socket.io 
-> http req are slow they are good for serving websites 
    here we need real time data trasnsfer for which we need websockets
    http and websockets - https://www.geeksforgeeks.org/what-is-web-socket-and-how-it-is-different-from-the-http/ must read 
    

for interviews get basic definations of basic hooks 
like useEffect is hook that let you use lifecycle methods in function components 

----------------------------
// problem with socketio

const app = express(); 
const server = http.createServer(app); 

server.listen(PORT, () => {
    console.log(`Listerning on port ${PORT}`)
})

we have to use server.listen and not app.listen


----------------------------

How to get socket in front end ? 
import io from 'socket.io-client' 
socket = io('localhost:5000)

after connection is established we can emit events with socket.emit
 which will be recognized by backend 
 along with this emit we can pass a data and we will receive this data on backend
-------------------------------

// getting paramters emitted from frontend on backend 
// as second parameter we can pass callback which will be evoked as soon as emit is coonected on backend
  socket.on("join", ({ name, room }, callback) => {
    console.log(name, " ", room);
    callback();
  });


----------------------------------- 

Along with useEffect we have to give cleanup function 
More on here : https://stackoverflow.com/questions/65225094/when-does-the-useeffects-callbacks-return-statement-execute

basically this cleanup function is called before the next render to cleanup
things from previous render 

in our case we are emitting user disconnnected in cleanup function 
--------------------------------------------

.trim funciton is useful - it removes the trailing and leading white spaces 
and line terminator characters from a string 

--------------------------------------- 

array.find and array.findIndex are useful functions 
const existingUser = users.find(
    (user) => user.room === room && user.name === name
  );
const index = users.findIndex((user) =>user.id === id);